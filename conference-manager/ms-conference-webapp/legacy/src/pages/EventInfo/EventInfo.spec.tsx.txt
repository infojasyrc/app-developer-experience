// TODO: This unit test was not well design
import { fireEvent, render, screen } from '@testing-library/react'
import { createMemoryHistory } from 'history'
import { Router } from 'react-router-dom'
import { UserContext } from '../../contexts/UserContext'

import EventInfoPage from './EventInfo'

describe('Event Info Page', () => {
  xit('should render component', () => {
    render(<EventInfoPage />)
    const title = screen.getByText(/Fluent React/)
    expect(title).toBeInTheDocument()

    const registerButton = screen.getByTestId('register-button')
    expect(registerButton).toBeInTheDocument()

    const imageContainer = screen.getByTestId('image-list-container')
    expect(imageContainer).toBeInTheDocument()
  })
  xit('handleRegister should navigate to login path when user is not logged in', () => {
    const history = createMemoryHistory()
    history.push = jest.fn()
    //const pushMock = jest.spyOn(history, 'push')
    const MockedComponent = () => {
      const isLoggedIn = false

      return (
        <Router history={history}>
          <UserContext.Provider value={{ isLoggedIn }}>
            <EventInfoPage />
          </UserContext.Provider>
        </Router>
      )
    }
    render(<MockedComponent />)

    fireEvent.click(screen.getByText('Register'))
    expect(history.push).toHaveBeenCalledWith('login')
  })
})
